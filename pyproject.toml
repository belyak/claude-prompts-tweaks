[project]
name = "claude-prompts-tweaks"
version = "0.1.0"
description = "CLI utility for analyzing and processing Claude Code system prompts and instructions"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.10.0",
    "isort>=5.13.2",
    "mypy>=1.13.0",
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.3.0",
    "pytest-mock>=3.14.0",
    "pre-commit>=4.0.0",
    "twine>=5.1.0",
    "check-wheel-contents>=0.6.0",
    "types-click",
    # Security tools
    "bandit[toml]>=1.7.0",
    "safety>=3.2.0",
    "pip-audit>=2.7.0",
    # Code quality
    "ruff>=0.6.0",
    "pylint>=3.2.0",
    "radon>=6.0.0",
    "xenon>=0.9.0",
    # Testing enhancements
    "hypothesis>=6.100.0",
    "mutmut>=2.5.0",
    "pytest-clarity>=1.0.0",
    "pytest-sugar>=1.0.0",
    # Documentation
    "sphinx>=7.3.0",
    "sphinx-autodoc-typehints>=2.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",
]
docs = [
    "sphinx>=7.3.0",
    "sphinx-autodoc-typehints>=2.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinx-autoapi>=3.0.0",
]

[project.scripts]
claude-prompts-tweaks = "claude_prompts_tweaks.main:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.12"
strict = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=claude_prompts_tweaks",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]

[tool.coverage.run]
branch = true
source = ["claude_prompts_tweaks"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "C90",   # mccabe complexity
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "AIR",   # Airflow
    "PERF",  # Perflint
    "RUF",   # Ruff-specific rules
]
ignore = [
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D100", "D103", "ANN"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring (handled by ruff)
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
]

[tool.pylint.format]
max-line-length = 88

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*_test.py"]

[tool.mutmut]
paths_to_mutate = "claude_prompts_tweaks/"
backup = false
runner = "pytest -x -q"
tests_dir = "tests/"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_pattern = [
    "claude_prompts_tweaks/__init__.py:__version__ = \"{version}\"",
]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "uv build"
upload_to_pypi = true
upload_to_release = true
commit_author = "semantic-release <semantic-release@github.com>"
commit_subject = "chore(release): {version} [skip ci]"
commit_message = ""
tag_format = "v{version}"
